#!/usr/bin/env node

const path = require("path");
const config = require(path.resolve(__dirname, "../dist/defaults")).default;

var Server = require("../dist/server").default;
var database = require("../dist/database").default;
var AppContext = require("../dist/AppContext").default;
var debug = require("debug")("ark-taco-shop-api:server");
var http = require("http");

(async function() {
  const { logger } = AppContext;

  try {
    if (!config.enabled) {
      debugger;
      logger.info("ðŸŒ® ark-taco-shop-api is disabled :grey_exclamation:");
      return null;
    }

    await database.setUp(config.database);

    if (config.server.enabled) {
      debugger;
      logger.info(config.server);
      const server = Server(config.server);

      // var port = normalizePort(process.env.PORT || "5000");
      // app.set("port", port);

      // var server = http.createServer(app);

      // server.listen(port);
      // server.on("error", onError);
      // server.on("listening", onListening);
    }
  } catch (error) {
    logger.error("ðŸŒ® ERROR");
    logger.error(error.stack);
    return process.exit(1);
  }
})();

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
